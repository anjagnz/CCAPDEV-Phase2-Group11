<!DOCTYPE html>
<html>
<head>
    <title>LabMate - Reservations</title> 
    <link rel="icon" type="image/x-icon" href="/img/favicon.ico">
    <link rel="stylesheet" href="css/theme-style.css">
    <link rel="stylesheet" href="css/navbar-style.css">
    <link rel="stylesheet" href="css/reservations.css">
    <link rel="stylesheet" href="css/pop-up.css">
    <link rel="stylesheet" href="css/reservation-details.css">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <!-- add navigation bar and interactivity  -->
        <script>
            /* adds outline design on active page in navigation bar */
            $(document).ready(function() {$.getScript("js/navbar.js");});
        </script>
</head>
<body>
    
    <!-- insert navigation bar for signed in view -->
    {{> navbar}}
    
    <h1>Your Reservations</h1>

    <!-- Reservations  -->
    <div class="reservations">
        <table>
            <thead>
                <tr>
                    <th></th>
                    <th>Laboratory Room</th>
                    <th>Reservation Date</th>
                    <th>Time Slot</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                {{#if reservations}}
                    {{#each reservations}}
                    <tr>
                        <td style="text-align: right;">
                            <input type="radio" name="select-option" class="select-btn" value="{{this._id}}">
                        </td>
                        <td>{{this.laboratoryRoom}}</td>
                        <td>{{this.reservationDate}}</td>
                        <td><span data-start-time="{{this.startTime}}"> {{this.startTime}} </span> - <span data-end-time="{{this.endTime}}"> {{this.endTime}} </span></td>
                        <td style="text-align: left;">
                            <img src="img/reservation-details.jpeg" data-reservation-id="{{this._id}}" class="details" onclick="openPopup2('{{this._id}}')">
                        </td>
                    </tr>
                    {{/each}}            
                {{/if}}
            </tbody>
        </table>
    </div>
    
    <div class="remove-btn-wrapper">
        <button type="button" class="remove-btn" onclick="openPopup1()">Remove Reservation</button>
    </div>
        
    <div id="overlay" class="overlay"></div>

    <!-- Reservation Details -->
    <div class="popup" id="reservation-details">
        <h1 class="reservation-details-title">Reservation Details</h1>
        <div class="details-container">
            <div class="input-wrapper field-group">
                <div class="label-wrapper field-label">            
                    Reservee Name:
                </div>
                <input type="text" id="reservee-name" class="text-field" data-label="reserveeName" disabled> 
            </div>

            <div class="input-wrapper field-group">
                <div class="label-wrapper field-label">            
                    Laboratory Room:
                </div>
                <input type="text" id="lab-room" class="text-field" data-label="laboratoryRoom" disabled> 
            </div>

            <div class="input-wrapper field-group">
                <div class="label-wrapper field-label">            
                    Seat Number:
                </div>
                <input type="text" id="seat-num" class="text-field" data-label="seatNumber" disabled>
            </div>

            <div class="input-wrapper field-group">
                <div class="label-wrapper field-label">            
                    Date of Booking:
                </div>
                <input type="text" id="booking-date" class="text-field" data-label="bookingDate" disabled>
            </div>

            <div class="input-wrapper field-group">
                <div class="label-wrapper field-label">            
                    Time of Booking:
                </div>
                <input type="text" id="booking-time" class="text-field" disabled>
            </div>

            <div class="input-wrapper field-group">
                <div class="label-wrapper field-label">            
                    Reservation Date:
                </div>
                <input type="text" id="reserve-date" class="text-field" data-label="reservationDate" disabled>
            </div>

            <div class="input-wrapper field-group">
                <div class="label-wrapper field-label">            
                    Start Time:
                </div>
                <input type="text" id="start-time" class="text-field" data-label="startTime" disabled>
            </div>

            <div class="input-wrapper field-group">
                <div class="label-wrapper field-label">            
                    End Time:
                </div>
                <input type="text" id="end-time" class="text-field" name="editable" data-label="endTime" disabled>
            </div>

            <div class="footer">
                <div class="button-wrapper1">
                    <button type="button" class="btn-1" id="edit-btn">Edit Reservation</button>
                </div>

                <div class="button-wrapper2">
                    <button type="done" class="btn-2" id="done-btn" onclick="done()">Done</button>
                </div>
            </div>
        </div>
    </div> 

    <!-- Remove Reservation -->
    <div class="popup" id="remove-reservation">
        <img src="img/message_icon.png" class="icon"/>
        <p class="message">Are you sure you want to remove this reservation? <br>
            This action cannot be undone.
        </p>
        
        <div class="btn-wrapper">
            <button type="button" class="btn1" onclick="cancel()">Cancel</button>
        </div>
            
        <div class="btn-wrapper">
            <button type="button" class="btn2" onclick="confirm()">Confirm</button>
        </div>
    </div>

    <script>
        async function loadReservationDetails(reservationId) {
            try {
                const response = await fetch(`/api/reservation/${reservationId}`, { method: "GET" });
                const reservation = await response.json();

                // Extract necessary details
                var reservationDate = formatToGMT8(reservation.reservationDate);
                var formattedDate = formatDate(new Date(reservation.bookingDate)).split("T");
                var bookingDate = formatToGMT8(new Date());
                var bookingTime = formattedDate[1];
                const userId = localStorage.getItem('userId');
                console.log(userId);
                const response2 = await fetch(`/api/user/${userId}`);
                const user = await response2.json();
                const studentName = user.firstName + " " + user.lastName;

                // Update form field values
                if (reservation.studentName){
                    document.getElementById("reservee-name").value = reservation.studentName;
                } else{
                    document.getElementById("reservee-name").value = studentName;
                }
                document.getElementById("lab-room").value = reservation.laboratoryRoom;
                document.getElementById("seat-num").value = reservation.seatNumber;
                document.getElementById("booking-date").value = bookingDate;
                document.getElementById("booking-time").value = bookingTime;
                document.getElementById("reserve-date").value = reservationDate;
                document.getElementById("start-time").value = reservation.startTime;
                document.getElementById("end-time").value = reservation.endTime;

                // Set up the edit button's onclick event with the reservation ID
                const editButton = document.getElementById("edit-btn");
                editButton.onclick = function() {
                    edit(reservationId);
                };
                
            } catch (error) {
                console.error("Error fetching reservations:", error);
            }
        }

        let remove= document.getElementById("remove-reservation");
        let details = document.querySelector("#reservation-details");
        let overlay = document.getElementById("overlay");
        let radioButtons = document.querySelectorAll(".select-btn");
        let removeButton = document.querySelector(".remove-btn");
        let editableButtons = document.querySelectorAll('[name="editable-buttons"]');

        function openPopup1() {
            // check if a reservation is selected first
            if (!document.querySelector('input[name="select-option"]:checked')) {
                alert("Please select a reservation to delete.");
                return;
            }

            // show confirm popup if reservation is selected
            remove.classList.add("open-popup");
            overlay.style.display = "block"; 
        }

        async function openPopup2(reservationId) {
            if (!reservationId) {
                console.error("No reservation selected.");
                return;
            }

            await loadReservationDetails(reservationId);
            details.classList.add("open-popup");
            overlay.style.display = "block";
        }


        // Function to delete a reservation
        async function deleteReservation() {
            try {
                // Get reservation id from radio selection
                const selectedReservation = document.querySelector('input[name="select-option"]:checked').value;

                // Send DELETE request to the server
                const response = await fetch(`/api/reservation/${selectedReservation}`, { method: 'DELETE' });

                // Check if the deletion was successful
                if (!response.ok) {
                    throw new Error("Failed to delete reservation.");
                }
            } catch (error) {
                console.error("Error deleting reservation:", error);
            }
        }
        

        // Format to GMT +8 from UTC

        function formatToGMT8(dateString) {
            const date = new Date(dateString);

            return date.toLocaleDateString("en-US", {
                timeZone: "Asia/Singapore",
                year: "numeric",
                month: "2-digit",
                day: "2-digit"
            });
        }

        // Confirm deletion
        async function confirm() {
            try {
                // Wait for the deletion to complete before refreshing the list
                await deleteReservation();
                
                alert("Reservation deleted successfully!");

                // Close the popup and hide the overlay
                remove.classList.remove("open-popup");
                overlay.style.display = "none"; 

                // Refresh the page list after deletion
                window.location.reload();
            } catch (error) {
                console.error("Error confirming deletion:", error);
            }

        }

        function cancel() {
            remove.classList.remove("open-popup");
            overlay.style.display = "none"; 
        }

        function done(){
            details.classList.remove("open-popup");
            overlay.style.display = "none";
            details.scrollTop = 0;
        }

        async function edit(reservationId) {
            // Find the currently active popup
            let popups = document.querySelectorAll(".popup");
            let activePopup = Array.from(popups).find(popup => 
                getComputedStyle(popup).visibility === "visible"
            );
            if (!activePopup) return; 

            // Get the end time field which is the only editable field
            let endTimeField = document.getElementById("end-time");

            console.log(endTimeField.value);

            // Create a select element to replace the input
            let select = document.createElement("select"); 
            select.className = endTimeField.className;
            select.id = "end-time-select";
            select.name = "endTime";
            select.style = "cursor: pointer";

            const response = await fetch(`/api/reservation/${reservationId}`, { method: "GET" });
            const reservation = await response.json();
            const response2 = await fetch(`/api/laboratories/${reservation.laboratoryRoom}`, {method: "GET"});
            const laboratory = await response2.json();

            // generate valid end times
            const seatNumber = reservation.seatNumber.toString();
            const seatTime = reservation.startTime;
            const selectedLab = laboratory._id;
            const selectedDate = reservation.reservationDate;

            console.log(seatNumber, seatTime, selectedLab, selectedDate);

            const timeSlots = [
                "07:30 A.M.", "08:00 A.M.", "08:30 A.M.", "09:00 A.M.",
                "09:30 A.M.", "10:00 A.M.", "10:30 A.M.", "11:00 A.M.",
                "11:30 A.M.", "12:00 P.M.", "12:30 P.M.", "01:00 P.M.",
                "01:30 P.M.", "02:00 P.M.", "02:30 P.M.", "03:00 P.M.",
                "03:30 P.M.", "04:00 P.M.", "04:30 P.M.", "05:00 P.M.",
                "05:30 P.M.", "06:00 P.M.", "06:30 P.M.", "07:00 P.M.",
                "07:30 P.M.", "08:00 P.M.", "08:30 P.M.", "09:00 P.M."
            ];

            const startIndex = timeSlots.indexOf(seatTime);
    
            if(startIndex === -1) {
                console.error("Invalid start time: ", seatTime);
                return;
            }

            // Fetch current reservations from the server
            fetch(`/api/reservations/lab/${selectedLab}/date/${selectedDate}`)
                .then(response => response.json())
                .then(data => {
                    let nextReservationIndex = timeSlots.length;

                    if (data.reservations && data.reservations.length > 0) {
                        const seatReservations = data.reservations.filter(res =>
                            res.seatNumber.toString() === seatNumber.toString() &&
                            timeSlots.indexOf(res.startTime) > startIndex
                        );

                        if (seatReservations.length > 0) {
                            const earliestNextReservation = seatReservations.reduce((earliest, current) => {
                                const earliestIndex = timeSlots.indexOf(earliest.startTime);
                                const currentIndex = timeSlots.indexOf(current.startTime);
                                return currentIndex < earliestIndex ? current : earliest;
                            });

                            nextReservationIndex = timeSlots.indexOf(earliestNextReservation.startTime);
                        }
                    }

                    for (let i = startIndex + 1; i <= nextReservationIndex; i++) {
                        if (i < timeSlots.length) {
                            const option = document.createElement("option");
                            option.value = timeSlots[i];
                            option.text = timeSlots[i];
                            select.appendChild(option);
                        }
                    }

                    select.value = endTimeField.value;

                })
                .catch(error => {
                    console.error('Error fetching reservations:', error);
                });
            
            
            // Store original text value in data attribute
            select.setAttribute("data-original-value", endTimeField.value);

            // Replace the input with the select
            endTimeField.parentNode.replaceChild(select, endTimeField);

            let editButton = document.getElementById("edit-btn");
            let doneButton = document.getElementById("done-btn");

            doneButton.textContent = "Save Changes";
            doneButton.onclick = function() {
                saveChanges(reservationId);
            };

            editButton.textContent = "Cancel";
            editButton.onclick = function() {
                cancelChanges(reservationId);
            };
        }

        function cancelChanges(reservationId) {
            // Get the select element
            let selectField = document.getElementById("end-time-select");
            if (!selectField) return;

            // Create a new input field to replace the select
            let textField = document.createElement("input");
            textField.className = selectField.className;
            textField.id = "end-time";  
            textField.value = selectField.getAttribute("data-original-value"); // Restore original value
            textField.type = "text"; 
            textField.name = "editable"; 
            textField.setAttribute("data-label", "endTime");
            textField.disabled = true;

            // Replace select with input field
            selectField.parentNode.replaceChild(textField, selectField);

            let editButton = document.getElementById("edit-btn");
            let doneButton = document.getElementById("done-btn");

            doneButton.textContent = "Done";
            doneButton.onclick = done;

            editButton.textContent = "Edit Reservation";
            editButton.onclick = function() {
                edit(reservationId);
            };
        }

        async function saveChanges(reservationId) {
            // Get the select element
            let selectField = document.getElementById("end-time-select");
            if (!selectField) return;

            let newValue = selectField.value; // Get the selected value
            let fieldName = selectField.name;

            let updateData = {}; // Object to store updated fields
            updateData[fieldName] = newValue; // Store new value

            // Create a new input field to replace the select
            let textField = document.createElement("input");
            textField.className = selectField.className;
            textField.id = "end-time";
            textField.value = newValue;
            textField.type = "text";
            textField.name = "editable";
            textField.setAttribute("data-label", "endTime");
            textField.disabled = true;

            // Replace select with input field
            selectField.parentNode.replaceChild(textField, selectField);

            // Send the PATCH request with updated values
            try {
                let response = await fetch(`/api/reservation/${reservationId}`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(updateData),
                });

                if (!response.ok) {
                    throw new Error("Failed to update reservation");
                }
                alert("Reservation updated successfully");

                window.location.reload();

            } catch (error) {
                console.error("Error updating reservation:", error);
            }

            let editButton = document.getElementById("edit-btn");
            let doneButton = document.getElementById("done-btn");

            doneButton.textContent = "Done";
            doneButton.onclick = done;

            editButton.textContent = "Edit Reservation";
            editButton.onclick = function() {
                edit(reservationId);
            };

            // Close the popup
            details.classList.remove("open-popup");
            overlay.style.display = "none";
            details.scrollTop = 0;

        }

        // For date formatting
        function formatDate(today) {  
		    let formattedDate = today.getFullYear().toString() + '-' + (today.getMonth() + 1).toString().padStart(2, 0) + '-' + today.getDate().toString().padStart(2, 0) + 'T' + today.getHours().toString().padStart(2, 0) + ':' + today.getMinutes().toString().padStart(2, 0);
		    return formattedDate;
	    }


    </script>
</body>
</html>
